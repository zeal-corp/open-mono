(self.webpackChunkblog=self.webpackChunkblog||[]).push([[578],{2288:function(e,t,n){"use strict";var a=n(3289),o=n(430),i=n.n(o),r={startOnLoad:!0,logLevel:"fatal",securityLevel:"strict",arrowMarkerAbsolute:!1,flowchart:{htmlLabels:!0,curve:"linear"},sequence:{diagramMarginX:50,diagramMarginY:10,actorMargin:50,width:150,height:65,boxMargin:10,boxTextMargin:5,noteMargin:10,messageMargin:35,mirrorActors:!0,bottomMarginAdj:1,useMaxWidth:!0,rightAngles:!1,showSequenceNumbers:!0,fontFamily:'"Jet Brains Mono", "sans-serif"'},themeVariables:{lineColor:"#ffffff",textColor:"#ffffff",primaryColor:"#ffffff"}};t.Z=function(e){var t=e.name,n=e.chart,o=e.config;return i().initialize(Object.assign({},r,o)),(0,a.useEffect)((function(){i().contentLoaded()})),n?a.createElement("div",{className:"mermaid",name:t},n):null}},2801:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u},chart:function(){return p},default:function(){return f}});var a=n(2),o=n(189),i=(n(3289),n(7081)),r=n(2288),s=["components"],l={},c={unversionedId:"posts/test-lifecycle",id:"posts/test-lifecycle",isDocsHomePage:!1,title:"test lifecycle",description:"we are using jest for our test runner, and specifically jest circus for the core runner. this combination is allowing us to do some very specific setup of the environment, playwright, and ci jobs. let's take a peek at our jest config:",source:"@site/docs/posts/test-lifecycle.mdx",sourceDirName:"posts",slug:"/posts/test-lifecycle",permalink:"/open-mono/docs/posts/test-lifecycle",editUrl:"https://github.com/zeal-corp/open-mono/edit/main/blog/docs/posts/test-lifecycle.mdx",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"jobs",permalink:"/open-mono/docs/jobs/index"},next:{title:"how zeal writes and runs tests",permalink:"/open-mono/docs/posts/testing-at-zeal"}},u=[{value:"test lifecycle",id:"test-lifecycle",children:[]},{value:"globalSetup",id:"globalsetup",children:[]},{value:"setupFilesAfterEnv",id:"setupfilesafterenv",children:[]},{value:"testEnvironment",id:"testenvironment",children:[]},{value:"globalTeardown",id:"globalteardown",children:[]}],p="sequenceDiagram\n    participant S as Setup (globalSetup)\n    participant A as After Env (setupFilesAfterEnv)\n    participant E as Test Env (testEnvironment)\n    participant T as Teardown (globalTeardown)\n    S->>A: await the completion of globalSetup\n    A->>E: configure jest itself\n    loop Run A Single Test\n      E->>E: Test Env runs for each test file\n    end\n    E->>T: await teardown after all tests run\n",d={toc:u,chart:p};function f(e){var t=e.components,n=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"we are using ",(0,i.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/api"},"jest")," for our test runner, and specifically ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/facebook/jest/blob/master/packages/jest-circus/README.md"},"jest circus")," for the core runner. this combination is allowing us to do some very specific setup of the environment, playwright, and ci jobs. let's take a peek at our jest config:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'module.exports = {\n  testRunner: "jest-circus/runner",\n  globalSetup: "<rootDir>/jest/setup.ts",\n  globalTeardown: "<rootDir>/jest/teardown.ts",\n  testEnvironment: "<rootDir>/jest/env.js",\n  setupFilesAfterEnv: ["<rootDir>/jest.setup.js"],\n};\n')),(0,i.kt)("p",null,"let's talk about what each chunk does and how it relates to running a single test."),(0,i.kt)("h2",{id:"test-lifecycle"},"test lifecycle"),(0,i.kt)(r.Z,{chart:p,mdxType:"Mermaid"}),(0,i.kt)("p",null,"the order of operations above is important to understand. there are a few important details:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Setup and After Env run ",(0,i.kt)("em",{parentName:"li"},"once")," per jest run (once per time you start the tests)"),(0,i.kt)("li",{parentName:"ul"},"Test Env runs before, during, and after ",(0,i.kt)("em",{parentName:"li"},"each")," single test file"),(0,i.kt)("li",{parentName:"ul"},"the Setup and Teardown scripts share a ",(0,i.kt)("inlineCode",{parentName:"li"},"global")," object")),(0,i.kt)("h2",{id:"globalsetup"},"globalSetup"),(0,i.kt)("p",null,"in our test framework the default ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn smoke:local")," does a lot of heavy lifting. it's designed to start up the entire project locally, wait for everything to build, and validate it's healthy. once that's all done it persists the running process to the global object."),(0,i.kt)("p",null,"this means in our ci we can simply run ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn smoke:local")," and the framework spins itself up and runs!"),(0,i.kt)("h2",{id:"setupfilesafterenv"},"setupFilesAfterEnv"),(0,i.kt)("p",null,"this is configuring jest itself, upping default timeouts and handling the jest defaults in a way we'd prefer!"),(0,i.kt)("h2",{id:"testenvironment"},"testEnvironment"),(0,i.kt)("p",null,"weyoun is a gracious runner, and aims to provide you with everything you need. knowing that we handle the setup and tear down of the playwright browser and page, and provide them to you on the global object at ",(0,i.kt)("inlineCode",{parentName:"p"},"page")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"browser"),". shown simply:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'{5} title="login.spec.ts"',"{5}":!0,title:'"login.spec.ts"'},'import { Page } from "playwright";\nimport { LoginPage } from "../../pom/login";\nimport { AdminPage, AdminSelectors } from "../../pom/admin-page";\n\nconst page: Page = global.page;\n\ndescribe("login", () => {\n  test("login succeeds", async () => {\n    const loginPage = new LoginPage(page);\n    const adminPage = new AdminPage(page);\n    await loginPage.login();\n    await adminPage.isShowing();\n    const welcomePanel = await page.$(AdminSelectors.welcome);\n    expect(await welcomePanel.innerText()).toContain("Welcome");\n  });\n});\n')),(0,i.kt)("p",null,"beyond that weyoun will automatically take a screenshot of any failure, and add it the the ",(0,i.kt)("inlineCode",{parentName:"p"},"img-out")," folder. in a not too distant state it will even upload remote failures for you to debug!"),(0,i.kt)("h2",{id:"globalteardown"},"globalTeardown"),(0,i.kt)("p",null,"this literally kills the app it spun up if it exists, and waits for the kill to complete."))}f.isMDXComponent=!0},5107:function(e,t,n){var a={"./locale":4138,"./locale.js":4138};function o(e){var t=i(e);return n(t)}function i(e){if(!n.o(a,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return a[e]}o.keys=function(){return Object.keys(a)},o.resolve=i,e.exports=o,o.id=5107}}]);